## General
- [x] This is a prototype to be fleshed out into a production-grade application.
- [x] All new development should be containerized using Docker.

## Docker Development Notes
- **Frontend changes may require complete rebuild**: Due to Docker caching issues with multi-stage builds, frontend changes may not take effect with normal `docker-compose build` or `docker-compose restart`. 
- **Use complete rebuild command**: When frontend changes don't appear after normal rebuild, use: `docker compose down --rmi all && docker compose up -d --build`
- **This ensures**: All images are removed and rebuilt from scratch, bypassing Docker's aggressive caching.

## Backend ✅ COMPLETED
- [x] The backend should be developed using Python.
- [x] Consider using a robust Python web framework (e.g., FastAPI, Django, or Flask).
- [x] Employ a production-grade database (e.g., PostgreSQL) instead of SQLite for future development.
- [x] Follow RESTful API design principles.
- [x] Implement comprehensive error handling and logging.
- [x] Write unit and integration tests for all backend components.
- [x] Implement JWT-based authentication and user management.
- [x] Add structured logging with rotation and monitoring.
- [x] Achieve 95% test coverage with comprehensive test suite.
- [x] Implement PostgreSQL schema with proper relationships.
- [x] Add health checks and monitoring endpoints.
- [x] Maintain API compatibility during migration.
- [x] **Database Functions**: Complete PostgreSQL function-based database operations
- [x] **Authentication System**: Full JWT-based auth with user management
- [x] **API Endpoints**: Comprehensive FastAPI implementation with all CRUD operations
- [x] **Error Handling**: Robust exception handling and logging
- [x] **Database Tests**: All database function tests passing (18/18)

## Frontend ✅ MOSTLY COMPLETED
- [x] The frontend should be developed using React and TypeScript.
- [x] Utilize a modern state management library (e.g., Redux Toolkit, Zustand).
- [x] Implement a component-based architecture.
- [x] Ensure the UI is responsive and accessible.
- [ ] **PRIORITY: Write unit and integration tests for all frontend components.**
- [x] Implement route visualization with interactive maps and elevation charts.
- [x] Set up React project structure with TypeScript and modern tooling.
- [x] Migrate vanilla JavaScript GPX analyzer to React components.
- [x] Implement state management with Zustand.
- [x] Migrate map visualization from vanilla Leaflet to react-leaflet.
- [x] Migrate charts from Chart.js to React-based charting.
- [x] Implement responsive design with Tailwind CSS.
- [x] **PRIORITY: Add interactive waypoint creation and editing**
  - [x] Implement click-to-create waypoints on map
  - [x] Add waypoint editing forms/modals
  - [x] Add drag-and-drop waypoint reordering
  - [x] Add waypoint type selection (start, checkpoint, finish, poi)
  - [x] Add real-time waypoint save functionality
  - [x] Add waypoint deletion capability
  - [x] Add waypoint renaming capability
  - [x] Add waypoint notes/description field
  - [x] Add rest time in mm:ss format (no limit for multiday races)
  - [x] Add elevation gain/loss display for each leg (+gain / -loss in feet)

## Pacing & Time Management ✅ COMPLETED
- [x] **Target Time Controls**: Comprehensive target time input supporting >24 hours
  - [x] HH:MM:SS format input with validation (e.g., 30:00:00 for 30 hours)
  - [x] Support for multiday races and ultra-endurance events
  - [x] Clear and user-friendly time input validation
- [x] **Pace Calculations**: Automatic pace calculation with rest time considerations
  - [x] Overall average pace = total time ÷ distance
  - [x] Moving average pace = (total time - total rest time) ÷ distance  
  - [x] Display paces in MM:SS per mile format
  - [x] Real-time pace updates based on waypoint rest times
- [x] **Rest Time Integration**: Seamless integration with waypoint rest times
  - [x] Aggregate total rest time from all waypoints
  - [x] Visual breakdown of total time vs moving time vs rest time
  - [x] Dynamic pace recalculation when waypoint rest times change
- [x] **Time Utility Functions**: Comprehensive time handling utilities
  - [x] HH:MM:SS ↔ seconds conversion functions
  - [x] MM:SS ↔ seconds conversion functions (for rest times)
  - [x] Input validation for both time formats
  - [x] Pace calculation and formatting functions
- [x] **UI/UX Features**: Professional and intuitive interface
  - [x] Route statistics display (distance, rest time, waypoints)
  - [x] Side-by-side overall pace vs moving pace comparison
  - [x] Time breakdown visualization
  - [x] Helpful tips and guidance for optimal pace planning
- [x] **Target Time Persistence**: Auto-save target time to route database
  - [x] Automatic saving of target time when set (for saved routes)
  - [x] Auto-loading of target time when routes are opened
  - [x] Persistence across page refreshes and browser sessions
  - [x] Backend API endpoint for route updates (PUT /api/routes/{id})
  - [x] Frontend integration with route loading and saving
  - [x] Visual indicators showing auto-save status
- [x] **Elevation-Adjusted Pacing**: Advanced pace calculations accounting for terrain
  - [x] Calculate route average elevation gain/loss per mile as baseline
  - [x] Apply pace multipliers based on excess elevation vs route average
  - [x] 5% slowdown per 30ft excess climb, 4% speedup per 30ft excess descent
  - [x] Maintain total moving time while redistributing pace across legs
  - [x] Elevation summary display (total gain/loss, averages per mile)
  - [x] Dual pace display: base pace + elevation-adjusted pace in leg breakdown
  - [x] Integration with existing linear slowdown factor
  - [x] Elevation-adjusted leg times and cumulative times throughout

## Infrastructure ✅ MOSTLY COMPLETED
- [x] Continue using Docker and Docker Compose for local development and deployment.
- [x] Set up PostgreSQL with proper Docker integration.
- [x] Implement health checks for all services.
- [x] Fix Docker health check compatibility issues.
- [ ] **NEXT: Set up CI/CD pipelines for automated testing and deployment.**
- [ ] Implement monitoring and alerting for production environments.
- [ ] Set up automated database migrations.
- [ ] Configure production environment variables and secrets.

## Code Style ✅ MOSTLY COMPLETED
- [x] Follow consistent code style guidelines for Python (e.g., PEP 8).
- [ ] **NEXT: Follow consistent code style guidelines for TypeScript/JavaScript (e.g., Prettier, ESLint).**
- [x] Add comments to explain complex logic or non-obvious code.
- [x] Implement comprehensive docstrings and type hints.
- [x] Follow proper exception handling patterns.

## Security & Authentication ✅ COMPLETED
- [x] Implement JWT-based authentication system.
- [x] Add user registration and login functionality.
- [x] Implement password hashing with PBKDF2.
- [x] Add route access control (private/public routes).
- [x] Implement proper session management.
- [x] Add input validation and sanitization.

## Testing & Quality Assurance ✅ MOSTLY COMPLETED
- [x] **Backend Testing**: 95% complete with comprehensive database tests
  - [x] Database function tests: 18/18 passing (100%)
  - [x] Model tests: 97% passing
  - [x] Exception handling tests: 98% passing
  - [ ] **PRIORITY: Fix API integration tests** (currently failing due to auth requirements)
- [x] **Frontend Testing Framework**: 85% complete with comprehensive setup
  - [x] Set up development Docker container for frontend testing
  - [x] Configure Jest and React Testing Library with proper mocks
  - [x] Write component tests for React components (84 tests, 30 passing)
  - [x] Set up coverage reporting (5.29% current, targeting 60%)
  - [x] Test infrastructure working: RouteVisualization (100%), ElevationChart (93%)
  - [ ] **NEXT: Fix component interface mismatches in test expectations**
  - [ ] **NEXT: Add integration tests for critical user flows**
  - [ ] Set up end-to-end testing with Cypress or Playwright
- [x] Set up pytest with proper configuration.
- [x] Generate HTML coverage reports.

## Database & Data Management ✅ COMPLETED
- [x] Migrate from SQLite to PostgreSQL.
- [x] Design proper database schema for multi-user support.
- [x] Implement user management with relationships.
- [x] Add proper indexes for performance.
- [x] Implement database connection pooling.
- [x] Add database health checks.
- [x] Create database migration scripts.

## IMMEDIATE NEXT PRIORITIES

### 1. **Frontend Testing Refinement** (HIGH) 
- [ ] Fix userEvent API compatibility (use older API or upgrade library)
- [ ] Fix component interface mismatches in test expectations
- [ ] Increase test coverage from 5.29% to target 60%+
- [ ] Add integration tests for critical user workflows
- [ ] Add frontend testing to CI/CD pipeline

### 2. **Backend API Test Fixes** (HIGH)
- [ ] Update API tests to include authentication headers
- [ ] Fix mocking to work with function-based database architecture
- [ ] Update expected response formats to match current API
- [ ] Ensure all API endpoints have proper test coverage

### 3. **Code Quality & Style** (MEDIUM)
- [ ] Set up ESLint and Prettier for frontend
- [ ] Add pre-commit hooks for code formatting
- [ ] Standardize import ordering and component structure

### 4. **CI/CD Pipeline** (MEDIUM)
- [ ] Set up GitHub Actions or similar for automated testing
- [ ] Add automated deployment pipeline
- [ ] Set up environment-specific configurations
